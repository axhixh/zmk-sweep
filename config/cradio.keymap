/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;   
    quick-tap-ms = <15>;
};

&lt {
    flavor = "tap-preferred";
    tapping-term-ms = <250>;
    quick-tap-ms = <15>;
};

&caps_word {    
    continue-list = <UNDERSCORE MINUS>;
};

&sk {    
    release-after-ms = <2200>;
};

/ { 

        combos {
            compatible = "zmk,combos";

            combo_symb {
               timeout-ms = <50>;
               key-positions = <15 16>;
               bindings = <&mo 3>;
            };

            combo_default {
               timeout-ms = <50>;
               key-positions = <14 15>;
               bindings = <&to 0>;
            };

            combo_bluetooth {
               timeout-ms = <50>;
               key-positions = <24 25>;
               bindings = <&to 5>;
            };

            combo_blank {
               timeout-ms = <50>;
               key-positions = <4 5>;
               bindings = <&to 6>;
            };

        };

        behaviors {
            hm: homerow_mods {
                compatible = "zmk,behavior-hold-tap";
                label = "HOMEROW_MODS";
                #binding-cells = <2>;
                tapping-term-ms = <350>;
                quick-tap-ms = <0>;
                flavor = "tap-preferred";
                bindings = <&kp>, <&kp>;
            };

            hs: homerow_shifts {
                compatible = "zmk,behavior-hold-tap";
                label = "HOMEROW_SHIFTS";
                #binding-cells = <2>;
                tapping-term-ms = <200>;
                quick-tap-ms = <0>;
                flavor = "tap-preferred";
                bindings = <&kp>, <&kp>;
            };

       	};

        keymap {
                compatible = "zmk,keymap";
                
            default_layer {
                bindings = <
                &kp Q      &kp W      &kp F      &kp P      &kp B    &kp J &kp L      &kp U      &kp Y      &kp QUOT
                &hm LCTL A &hm LALT R &hm LGUI S &hs LSFT T &kp G    &kp M &hs RSFT N &hm RGUI E &hm RALT I &hm RCTL O
                &kp Z      &kp X      &kp C      &kp D      &kp V    &kp K &kp H      &kp CMMA   &kp DOT    &kp FSLH
                &mt LSFT ESC &lt 1 RET                               &lt 2 SPC &mt RSFT BSPC 
                >;
            };

            one_layer {
                bindings = <
                &none     &caps_word &kp LA(LG(3)) &kp LA(LG(4)) &kp LG(EQUAL)  &kp PG_UP  &kp HOME     &kp UP        &kp END   &kp PAUSE_BREAK  
                &sk LCTL  &sk LALT   &sk LGUI      &sk LSFT      &kp LG(MINUS)  &kp PG_DN  &kp LEFT     &kp DOWN      &kp RIGHT &kp SLCK  
                &kp LG(Z) &kp LG(X)  &kp LG(C)     &kp LG(SPC)   &kp LG(V)      &caps_word &kp LC(LEFT) &kp LC(RIGHT) &kp INS   &kp PSCRN 
                &trans &trans                                                   &kp TAB    &kp  DEL                                       
                >;
            };

            two_layer {
                bindings = <
                &kp BSLH  &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT   &kp C_VOL_UP  &kp LA(LG(LEFT)) &kp LA(LG(UP))   &kp LA(LG(RIGHT)) &kp C_BRI_UP
                &kp NUM_1 &kp NUM_2 &kp NUM_3 &kp NUM_4 &kp NUM_5  &kp K_MUTE    &sk RSFT         &sk RGUI         &sk RALT          &sk RCTL
                &kp NUM_6 &kp NUM_7 &kp NUM_8 &kp NUM_9 &kp NUM_0  &kp C_VOL_DN  &to 4            &kp LA(LG(DOWN)) &kp LA(LG(F))     &kp C_BRI_DN
                &kp SEMI  &kp GRAVE                                &trans        &trans 
                >;
            };    

            three_layer {
                bindings = <
                &kp PIPE  &kp UNDER &kp PLUS &kp LBRC &kp RBRC   &kp C_VOL_UP  &kp LA(LG(LEFT)) &kp LA(LG(UP))   &kp LA(LG(RIGHT)) &kp C_BRI_UP
                &kp EXCL  &kp AT    &kp HASH &kp DLLR &kp PRCNT  &kp K_MUTE    &sk RSFT         &sk RGUI         &sk RALT          &sk RCTL
                &kp CARET &kp AMPS  &kp STAR &kp LPAR &kp RPAR   &kp C_VOL_DN  &to 4            &kp LA(LG(DOWN)) &kp LA(LG(F))     &kp C_BRI_DN
                &kp COLON &kp TILDE                              &trans        &trans 
                >;
            };    
        
            four_layer {
                bindings = <
                &kp F1 &kp F2  &kp F3  &kp F4  &kp LG(EQUAL)  &kp C_VOL_UP  &kp LA(LG(LEFT)) &kp LA(LG(UP))   &kp LA(LG(RIGHT)) &kp C_BRI_UP
                &kp F5 &kp F6  &kp F7  &kp F8  &kp LG(MINUS)  &kp K_MUTE    &sk RSFT         &sk RGUI         &sk RALT          &sk RCTL
                &kp F9 &kp F10 &kp F11 &kp F12 &kp LG(0)      &kp C_VOL_DN  &trans           &kp LA(LG(DOWN)) &kp LA(LG(F))     &kp C_BRI_DN
                &kp ESC &kp RET                               &to 0 &kp BSPC 
                >;
            };

            five_layer {
                bindings = <
                &bt BT_SEL 0  &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4  &none &reset      &none &none &none
                &bt BT_CLR    &none        &none        &none        &kp B         &kp T &bootloader &none &none &none
                &none         &none        &none        &none        &none         &none &none       &none &none &none 
                &to 0 &to 0                                                        &to 6 &to 6
                >;
            };    

            six_layer {
                bindings = <
                &none &none &none &none &none    &none &none &none &none &none
                &none &none &none &none &none    &none &none &none &none &none
                &none &none &none &none &none    &none &none &none &none &none 
                &none &none                      &none &none
                >;
            };    
        };
};
